<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="./styles/style.css">
  <title>Cadastro</title>
  <style>
    * {
      margin: 0;
      padding: 0%;
      box-sizing: border-box;
      font-family: Helvetica;
      border: none;
    }

    body {
      background-color: rgb(221, 221, 221);
    }

    #main-container {
      width: 500px;
    }

    .full-box {
      flex: 1 1 100%;
      position: relative;
    }

    .half-box {
      flex: 1 1 45%;
      position: relative;
    }

    .spacing {
      margin-right: 2.5%;
    }

    label {
      font-size: .8rem;
    }

    .error-validation {
      color: #ff1a1a;
      position: absolute;
      top: 57px;
      font-size: 12px;
    }

    .template {
      display: none;
    }
  </style>
</head>

<body>
  <%- include('../components/navbar.ejs'); %>

    <div id="main-container" class="ml-auto mr-auto bg-white rounded-xl p-8 mt-16">
      <h1 class="text-center mb-6 text-xl">Cadastre-se para acessar o projeto</h1>
      <form onsubmit="return AAAAAAAAAAAA(this);" id="register-form"
        class="flex flex-wrap justify-between" action="/cadastrar" method="POST">
        <div class="full-box">
          <label class="block w-full text-left font-semibold" for="email">E-mail</label>
          <input
            class="block w-full text-left p-4 border-solid border-b-2 border-r-0 border-l-0 border-t-0 focus:border-blue-500 mb-8"
            type="email" name="email" id="email" placeholder="Digite seu e-mail" data-min-length="2"
            data-email-validate>
        </div>
        <div class="half-box spacing">
          <label class="block w-full text-left font-semibold" for="name">Nome</label>
          <input
            class="block w-full text-left p-4 border-solid border-b-2 border-r-0 border-l-0 border-t-0 focus:border-blue-500 mb-8"
            type="text" name="name" id="name" placeholder="Digite seu nome" data-required
            data-min-length="3" data-max-length="16">
        </div>
        <div class="half-box">
          <label class="block w-full text-left font-semibold" for="lastname">Sobrenome</label>
          <input
            class="block w-full text-left p-4 border-solid border-b-2 border-r-0 border-l-0 border-t-0 focus:border-blue-500 mb-8"
            type="text" name="lastname" id="lastname" placeholder="Digite seu sobrenome"
            data-required data-only-letters>
        </div>
        <div class="half-box spacing">
          <label class="block w-full text-left font-semibold" for="lastname">Senha</label>
          <input
            class="block w-full text-left p-4 border-solid border-b-2 border-r-0 border-l-0 border-t-0 focus:border-blue-500 mb-8"
            type="password" name="password" id="password" placeholder="Digite sua senha"
            data-password-validate data-required>
        </div>
        <div class="half-box">
          <label class="block w-full text-left font-semibold" for="passconfirmation">Confirmação de
            senha</label>
          <input
            class="block w-full text-left p-4 border-solid border-b-2 border-r-0 border-l-0 border-t-0 focus:border-blue-500 mb-8"
            type="password" name="passconfirmation" id="passwordconfirmation"
            placeholder="Digite novamente sua senha" data-equal="password">
        </div>
        <div>
          <input type="checkbox" name="agreement" id="agreement" class="mr-2 mb-8">
          <label for="agreement" id="agreement-label" class="w-auto inline-block">Eu li e aceito os
            <a href="#" class="text-blue-500">
              termos de uso
            </a>
          </label>
        </div>
        <button id="btn-submit" type="submit"
          class="uppercase font-semibold border-none h-10 rounded-lg bg-blue-500 w-full text-white transition-all duration-200 ease-linear hover:bg-blue-700">
          Registrar
        </button>
      </form>
    </div>
    <p class="error-validation template"></p>

    <script>
      class Validator {

        constructor() {
          this.validations = [
            'data-min-length',
            'data-max-length',
            'data-only-letters',
            'data-email-validate',
            'data-required',
            'data-equal',
            'data-password-validate',
          ]
        }

        // inicia a validação de todos os campos
        validate(form) {

          // limpa todas as validações antigas
          let currentValidations = document.querySelectorAll('form .error-validation');

          if (currentValidations.length) {
            this.cleanValidations(currentValidations);
          }

          // pegar todos inputs
          let inputs = form.getElementsByTagName('input');
          // transformar HTMLCollection em arr
          let inputsArray = [...inputs];

          // loop nos inputs e validação mediante aos atributos encontrados
          inputsArray.forEach(function (input, obj) {

            // fazer validação de acordo com o atributo do input
            for (let i = 0; this.validations.length > i; i++) {
              if (input.getAttribute(this.validations[i]) != null) {

                // limpa string para saber o método
                let method = this.validations[i].replace("data-", "").replace("-", "");

                // valor do input
                let value = input.getAttribute(this.validations[i])

                // invoca o método
                this[method](input, value);

              }
            }

          }, this);

        }

        // método para validar se tem um mínimo de caracteres
        minlength(input, minValue) {

          let inputLength = input.value.length;

          let errorMessage = `O campo precisa ter pelo menos ${minValue} caracteres`;

          if (inputLength < minValue) {
            this.printMessage(input, errorMessage);
          }

        }

        // método para validar se passou do máximo de caracteres
        maxlength(input, maxValue) {

          let inputLength = input.value.length;

          let errorMessage = `O campo precisa ter menos que ${maxValue} caracteres`;

          if (inputLength > maxValue) {
            this.printMessage(input, errorMessage);
          }

        }

        // método para validar strings que só contem letras
        onlyletters(input) {

          let re = /^[A-Za-z]+$/;;

          let inputValue = input.value;

          let errorMessage = `Este campo não aceita números nem caracteres especiais`;

          if (!re.test(inputValue)) {
            this.printMessage(input, errorMessage);
          }

        }

        // método para validar e-mail
        emailvalidate(input) {
          let re = /\S+@\S+\.\S+/;

          let email = input.value;

          let errorMessage = `Insira um e-mail no padrão matheus@email.com`;

          if (!re.test(email)) {
            this.printMessage(input, errorMessage);
          }

        }

        // verificar se um campo está igual o outro
        equal(input, inputName) {

          let inputToCompare = document.getElementsByName(inputName)[0];

          let errorMessage = `Este campo precisa estar igual ao ${inputName}`;

          if (input.value != inputToCompare.value) {
            this.printMessage(input, errorMessage);
          }
        }

        // método para exibir inputs que são necessários
        required(input) {

          let inputValue = input.value;

          if (inputValue === '') {
            let errorMessage = `Este campo é obrigatório`;

            this.printMessage(input, errorMessage);
          }

        }

        // validando o campo de senha
        passwordvalidate(input) {

          // explodir string em array
          let charArr = input.value.split("");

          let uppercases = 0;
          let numbers = 0;

          for (let i = 0; charArr.length > i; i++) {
            if (charArr[i] === charArr[i].toUpperCase() && isNaN(parseInt(charArr[i]))) {
              uppercases++;
            } else if (!isNaN(parseInt(charArr[i]))) {
              numbers++;
            }
          }

          if (uppercases === 0 || numbers === 0) {
            let errorMessage = `A senha precisa um caractere maiúsculo e um número`;

            this.printMessage(input, errorMessage);
          }

        }

        // método para imprimir mensagens de erro
        printMessage(input, msg) {

          // checa os erros presentes no input
          let errorsQty = input.parentNode.querySelector('.error-validation');

          // imprimir erro só se não tiver erros
          if (errorsQty === null) {
            let template = document.querySelector('.error-validation').cloneNode(true);

            template.textContent = msg;

            let inputParent = input.parentNode;

            template.classList.remove('template');

            inputParent.appendChild(template);
          }

        }

        // remove todas as validações para fazer a checagem novamente
        cleanValidations(validations) {
          validations.forEach(el => el.remove());
        }

      }

      let form = document.getElementById('register-form');
      let submit = document.getElementById('btn-submit');

      let validator = new Validator();

      // evento de envio do form, que valida os inputs

      function AAAAAAAAAAAA(form) {
        return validator.validate(form)
      }
    </script>
</body>

</html>